import java.util.*;


public class Sentence {

    private String string;


    //sentence constructor
    public Sentence(String string) {

        string = fixSentence(string);

        this.string = string;
    }


    //getter
    public String getString() {
        return string;
    }


    //translation part
    public void TranslateSentence(Map<String, Word> dictionary) {

        String[] words = getString().split("\\s+");

        List<Word> labeledWords = new ArrayList<>();

        //   System.out.println(Arrays.toString(words) + " <- list");


        String match;
        boolean lastNounMasculine = true;
        boolean lastNounPlural = false;

        for (int i = 0; i < words.length; i++) {


            match = distance(words[i], dictionary);

            Word matchedWord = new Word(

                    dictionary.get(match).getEnglish(),
                    dictionary.get(match).getSpanish(),
                    dictionary.get(match).getType(),
                    dictionary.get(match).getPlural()

            );

            labeledWords.add(matchedWord);

            int mLength = match.length();
            int wLength = words[i].length();

            if (((wLength > mLength && words[i].charAt(wLength - 1) == 's') ||
                    (dictionary.get(match).getEnglish().charAt(mLength - 1) != 's' &&
                            words[i].charAt(wLength - 1) == 's')) && wLength > 1) {
                //changing Word type values
                labeledWords.get(i).setPlural(true);
            }
        }


        //changes adjective to plural

        //article change

        lastNounMasculine = true;
        lastNounPlural = false;

        fixWord_Her(labeledWords);

        rule3(labeledWords);

        rule1(labeledWords);

        rule2(labeledWords);

        rule4(labeledWords);

        rule5(labeledWords);

        rule6(labeledWords);

        rule7(labeledWords);

        rule8(labeledWords);

        rule9(labeledWords);

        rule10(labeledWords);

        rule11(labeledWords);
       /* for (Word x : labeledWords) {
            System.out.println("\nword: " + x.getEnglish() + "\nlabel: " + x.getType() + "\nplural: " + x.getPlural() + "\nmasculine: " + x.getMasculine());
        }
*/
/*        for (Word x : labeledWords) {
            System.out.print(x.getEnglish() + " ");
        }

        System.out.println();*/

        for (Word x : labeledWords) {
            System.out.print(x.getSpanish() + " ");
        }

        System.out.println();


    }

    public static List<Word> fixWord_Her(List<Word> labeledWords) {

        for (int i = 0; i < labeledWords.size() - 1; i++) {
            if (labeledWords.get(i).getEnglish().equals("her") &&
                    (!labeledWords.get(i + 1).getType().equals("adjective") &&
                            !labeledWords.get(i + 1).getType().equals("noun"))) {
                labeledWords.get(i).setType("pronoun");
                labeledWords.get(i).setSpanish("ella");
                //         System.out.println("karoce");
            }

            //        System.out.println(labeledWords.get(i).getType());
        }

        return labeledWords;

    }

    public static List<Word> rule11(List<Word> labeledWords) {

        if(labeledWords.get((labeledWords.size()-1)).getEnglish().equals("?")){
            labeledWords.add(0, labeledWords.get(labeledWords.size()-1));
            labeledWords.get(labeledWords.size()-1).setSpanish("?");
        }

        return labeledWords;

    }

    public static List<Word> rule10(List<Word> labeledWords) {

        for (int i = labeledWords.size() - 1; i > 0; i--) {
            if(labeledWords.get(i).getSpanish().equals("tú") &&
                    labeledWords.get(i-1).getType().equals("preposition")){
                labeledWords.get(i).setSpanish("ti");
            }else if(labeledWords.get(i-1).getEnglish().equals("with")){
                if(labeledWords.get(i).getEnglish().equals("me")){
                    labeledWords.get(i).setSpanish("conmigo");
                    labeledWords.remove(i-1);
                }else if(labeledWords.get(i).getEnglish().equals("you")){
                    labeledWords.get(i).setSpanish("contigo");
                    labeledWords.remove(i-1);
                }
            }
        }

        return labeledWords;

    }


    public static List<Word> rule9(List<Word> labeledWords) {

        for (int i = labeledWords.size() - 1; i > 0; i--) {
            if(i>1 && i<(labeledWords.size()-1) &&
                    labeledWords.get(i).getType().equals("negation") &&
                    labeledWords.get(i-1).getType().equals("verb") &&
                    labeledWords.get(i-2).getType().equals("pronoun") &&
                    labeledWords.get(i+1).getType().equals("verb")){

                labeledWords.add(i-2, labeledWords.get(i));
                labeledWords.remove(i+1);

            }else if(labeledWords.get(i).getType().equals("negation") && labeledWords.get(i-1).getType().equals("verb")){
                Collections.swap(labeledWords, i, i-1);
            }
        }

        return labeledWords;

    }

    public static List<Word> rule8(List<Word> labeledWords) {

        for (int i = labeledWords.size() - 1; i > 0; i--) {

            if (labeledWords.get(i).getType().equals("pronoun") &&
                    labeledWords.get(i - 1).getType().equals("verb") ||

                    (i > 1 && negation(labeledWords.get(i - 2)) &&
                            labeledWords.get(i).getType().equals("pronoun") &&
                            labeledWords.get(i - 1).getType().equals("verb"))) {

                if (i > 1 && negation(labeledWords.get(i - 2))) {
                    i--;
                }

                if (labeledWords.get(i).getEnglish().equals("him") ||
                        labeledWords.get(i).getEnglish().equals("it")) {

                    labeledWords.get(i).setSpanish("lo");

                } else if (labeledWords.get(i).getEnglish().equals("her")) {
                    labeledWords.get(i).setSpanish("la");
                } else if (labeledWords.get(i).getEnglish().equals("you")) {
                    labeledWords.get(i).setSpanish("te");
                } else if (labeledWords.get(i).getEnglish().equals("me")) {
                    labeledWords.get(i).setSpanish("me");
                } else if (labeledWords.get(i).getEnglish().equals("them") ||
                        labeledWords.get(i).getEnglish().equals("those")) {

                    labeledWords.get(i).setSpanish("los");

                } else if (labeledWords.get(i).getEnglish().equals("us")) {
                    labeledWords.get(i).setSpanish("nos");
                }

                if (negation(labeledWords.get(i-1))) {

                    System.out.println(labeledWords.get(i+1).getSpanish());

                    labeledWords.add(i-1, labeledWords.get(i+1));
                    labeledWords.remove(i+2);
                    //            System.out.println(labeledWords.get(i+1).getSpanish());


                } else {
                    labeledWords.add(i - 1, labeledWords.get(i));
                    labeledWords.remove(i + 1);
                }

            }

        }

        return labeledWords;

    }

    public static List<Word> rule7(List<Word> labeledWords) {

        for (int i = 0; i < labeledWords.size() - 2; i++) {
            if (labeledWords.get(i).getType().equals("pronoun") &&
                    labeledWords.get(i + 1).getType().equals("verb")
                    ) {
                if (labeledWords.get(i + 1).getSpanish().equals("es")) {
                    labeledWords.remove(i);
                } else if (labeledWords.get(i + 1).getSpanish().length() > 3) {
                    if (labeledWords.get(i + 1).getSpanish().substring(0, 3).equals("est")) {
                        labeledWords.remove(i);
                    }
                }
            }
        }
        return labeledWords;
    }


    public static List<Word> rule6(List<Word> labeledWords) {

        for (int i = labeledWords.size() - 1; i > 0; i--) {


            if ((labeledWords.get(i).getType().equals("verb") ||
                    labeledWords.get(i).getEnglish().equals("with"))/* ||
                    (negation((labeledWords.get(i - 1))) &&
                            (labeledWords.get(i).getType().equals("verb") ||
                                    labeledWords.get(i).getEnglish().equals("with")))
*/
                    ) {

                if (i > 0 && negation(labeledWords.get(i - 1))) {
                    i--;
                }

                if (labeledWords.get(i - 1).getSpanish().equals("soy")) {
                    labeledWords.get(i - 1).setSpanish("estoy");
                } else if (labeledWords.get(i - 1).getSpanish().equals("eres")) {

                    labeledWords.get(i - 1).setSpanish("estás");

                } else if (labeledWords.get(i - 1).getSpanish().equals("es")) {

                    labeledWords.get(i - 1).setSpanish("está");

                } else if (labeledWords.get(i - 1).getSpanish().equals("somos")) {

                    labeledWords.get(i - 1).setSpanish("estamos");

                } else if (labeledWords.get(i - 1).getSpanish().equals("son")) {

                    labeledWords.get(i - 1).setSpanish("están");

                }
            }

        }
        return labeledWords;

    }

    public static List<Word> rule5(List<Word> labeledWords) {

        for (int i = labeledWords.size() - 1; i > 0; i--) {
            if (labeledWords.get(i).getEnglish().equals("are")) {
                if (labeledWords.get(i - 1).getEnglish().equals("you")) {
                    labeledWords.get(i).setSpanish("eres");
                } else if (labeledWords.get(i - 1).getEnglish().equals("we")) {
                    labeledWords.get(i).setSpanish("somos");
                } else if (labeledWords.get(i - 1).getEnglish().equals("they")) {
                    labeledWords.get(i).setSpanish("son");
                }
            }
        }

        return labeledWords;
    }


    public static List<Word> rule4(List<Word> labeledWords) {
        for (int i = labeledWords.size() - 1; i > 0; i--) {

            if (labeledWords.get(i).getType().equals("noun") &&
                    labeledWords.get(i).getPlural() &&
                    labeledWords.get(i - 1).getType().equals("possessive")
                    ) {

                labeledWords.get(i - 1).setSpanish(labeledWords.get(i - 1).getSpanish() + "s");

            }

        }

        return labeledWords;
    }


    public static List<Word> rule2(List<Word> labeledWords) {

        boolean lastNounMasculine = true;
        boolean lastNounPlural = false;


        for (int i = 0; i < labeledWords.size(); i++) {

            //Rule 2 part 1
            if (labeledWords.get(i).getType().equals("noun")) {

                if (labeledWords.get(i).getPlural()) {
                    if (isVowel(labeledWords.get(i).getSpanish().charAt(labeledWords.get(i).spanishLength() - 1))) {

                        labeledWords.get(i).setSpanish(labeledWords.get(i).getSpanish() + "s");
                        //     System.out.println("***" + labeledWords.get(i).getSpanish());
                    } else {
                        labeledWords.get(i).setSpanish(labeledWords.get(i).getSpanish() + "es");
                    }
                }


                lastNounMasculine = labeledWords.get(i).getMasculine();
                lastNounPlural = labeledWords.get(i).getPlural();

            }


            //Rule 2 part 2
            if (lastNounPlural && labeledWords.get(i).getType().equals("adjective")) {
                labeledWords.get(i).setSpanish(labeledWords.get(i).getSpanish() + "s");
            }

        }


        return labeledWords;

    }


    public static List<Word> rule1(List<Word> labeledWords) {

        boolean lastNounMasculine = true;
        boolean lastNounPlural = false;
        for (int i = 0; i < labeledWords.size(); i++) {


            //Rule 1 part 1
            //changes masculine or feminine type of nouns
            if (labeledWords.get(i).getType().equals("noun")) {
                //       System.out.println("veikia");

                if (labeledWords.get(i).getSpanish().charAt(labeledWords.get(i).getSpanish().length() - 1) == 'a' ||
                        labeledWords.get(i).getSpanish().charAt(labeledWords.get(i).spanishLength() - 1) == 'd' ||
                        labeledWords.get(i).getSpanish().charAt(labeledWords.get(i).spanishLength() - 1) == 'z' ||
                        (labeledWords.get(i).getSpanish().length() > 3 && labeledWords.get(i).getSpanish().substring(labeledWords.get(i).spanishLength() - 3).equals("ión"))
                        ) {

                    labeledWords.get(i).setMasculine(false);
                }
                lastNounMasculine = labeledWords.get(i).getMasculine();
                lastNounPlural = labeledWords.get(i).getPlural();
            }

            //Rule 1 part 2
            //changes adjective last letter to o if the noun is feminine
            if (!lastNounMasculine) {
                if (labeledWords.get(i).getType().equals("adjective") &&
                        labeledWords.get(i).getSpanish().charAt(labeledWords.get(i).spanishLength() - 1) == 'o') {

                    labeledWords.get(i).setSpanish(changeLastLetter(labeledWords.get(i).getSpanish(), "a"));
                }

            }


        }
        for (int i = labeledWords.size() - 1; i >= 0; i--) {

            if (labeledWords.get(i).getType().equals("noun")) {
                lastNounMasculine = labeledWords.get(i).getMasculine();
                lastNounPlural = labeledWords.get(i).getPlural();
            }

            if (labeledWords.get(i).getType().equals("article") && !lastNounMasculine) {
                if (labeledWords.get(i).getEnglish().equals("the")) {
                    labeledWords.get(i).setSpanish("la");
                } else if (labeledWords.get(i).getEnglish().equals("a") ||
                        labeledWords.get(i).getEnglish().equals("an")
                        ) {
                    labeledWords.get(i).setSpanish("una");
                }
            }

            if (labeledWords.get(i).getType().equals("article") && lastNounPlural) {
                if (lastNounMasculine) {
                    labeledWords.get(i).setSpanish("los");
                } else {
                    labeledWords.get(i).setSpanish(labeledWords.get(i).getSpanish() + "s");
                }
            }
        }

        return labeledWords;

    }

    public static List<Word> rule3(List<Word> labeledWords) {

        int nounIndex = -1;
        int adjectiveIndex = -1;

        boolean firstNoun = true;
        boolean firstAdjective = true;

        //System.out.println(labeledWords.size());


        for (int i = labeledWords.size() - 1; i >= 0; i--) {

            if (labeledWords.get(i).getType().equals("noun")) {


                nounIndex = i;
                System.out.println(i + " krc");


            }

            if (labeledWords.get(i).getType().equals("adjective")) {

                adjectiveIndex = i;

                //     System.out.println(adjectiveIndex + " adjective");
                //  System.out.println(nounIndex + " noun");

                if (nounIndex > adjectiveIndex) {

                    //System.out.println(labeledWords.get(nounIndex).getEnglish());
                    // System.out.println(labeledWords.size());

                    labeledWords.add(adjectiveIndex, labeledWords.get(nounIndex));
                    labeledWords.remove(nounIndex + 1);
                    nounIndex = adjectiveIndex;
                    System.out.println("gal bus aisku  " + nounIndex);

                }

            }

        }

        return labeledWords;
    }


    public static boolean isVowel(char c) {
        return "aeiou".indexOf(c) != -1;
    }


    public static String changeLastLetter(String string, String x) {
        return string.substring(0, string.length() - 1) + x;
    }


    //fixes sentence separate words and symbols
    public static String fixSentence(String string) {

        string.toLowerCase();

        int lastIndex = 0;
        String whiteSpace = " ";

        for (int i = 0; i < string.length(); i++) {

            if (string.charAt(i) == ',' ||
                    string.charAt(i) == '.' ||
                    string.charAt(i) == '?' ||
                    string.charAt(i) == '!') {

                string = string.substring(0, i) + whiteSpace + string.substring(i);
                i++;

            }

        }

        return string;
    }


    //returns the word with the lowerst levensthein value
    public static String distance(String word, Map<String, Word> dictionary) {

        String lastWord = "";
        int size = -1;
        for (String name : dictionary.keySet()) {

            String key = name;

            // i == 0
            int[] costs = new int[key.length() + 1];
            for (int j = 0; j < costs.length; j++)
                costs[j] = j;
            for (int i = 1; i <= word.length(); i++) {
                // j == 0; nw = lev(i - 1, j)
                costs[0] = i;
                int nw = i - 1;
                for (int j = 1; j <= key.length(); j++) {
                    int cj = Math.min(1 + Math.min(costs[j], costs[j - 1]), word.charAt(i - 1) == key.charAt(j - 1) ? nw : nw + 1);
                    nw = costs[j];
                    costs[j] = cj;
                }
            }

            //first loop
            if (size == -1) {
                size = costs[key.length()];
                lastWord = key;
            } else if (costs[key.length()] < size) {
                size = costs[key.length()];
                lastWord = key;
            }


        }
        return lastWord;
    }

    public static boolean negation(Word word) {
        if (word.getType().equals("negation")) {
            return true;
        } else {
            return false;
        }
    }

}
